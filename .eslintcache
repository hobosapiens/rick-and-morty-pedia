[{"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\index.js":"1","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\reportWebVitals.js":"2","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\app\\App.js":"3","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\services\\api.js":"4","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\header\\header.js":"5","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\random-character\\random-character.js":"6","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\item-list\\item-list.js":"7","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\character-info\\character-info.js":"8","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\item-list\\index.js":"9","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\character-info\\index.js":"10","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\random-character\\index.js":"11","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\preloader\\preloader.js":"12","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\app\\index.js":"13","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\error-indicator\\error-indicator.js":"14","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\header\\index.js":"15","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\error-indicator\\index.js":"16","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\preloader\\index.js":"17"},{"size":299,"mtime":1611259495074,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1610125590283,"results":"20","hashOfConfig":"19"},{"size":869,"mtime":1611400965525,"results":"21","hashOfConfig":"19"},{"size":2031,"mtime":1611354740868,"results":"22","hashOfConfig":"19"},{"size":1110,"mtime":1611149692496,"results":"23","hashOfConfig":"19"},{"size":5183,"mtime":1611352774678,"results":"24","hashOfConfig":"19"},{"size":1159,"mtime":1611398988521,"results":"25","hashOfConfig":"19"},{"size":2900,"mtime":1611578656343,"results":"26","hashOfConfig":"19"},{"size":63,"mtime":1611150319857,"results":"27","hashOfConfig":"19"},{"size":78,"mtime":1611150448648,"results":"28","hashOfConfig":"19"},{"size":84,"mtime":1611150104176,"results":"29","hashOfConfig":"19"},{"size":301,"mtime":1611578123112,"results":"30","hashOfConfig":"19"},{"size":47,"mtime":1611259462818,"results":"31","hashOfConfig":"19"},{"size":618,"mtime":1611271880946,"results":"32","hashOfConfig":"19"},{"size":56,"mtime":1611148643976,"results":"33","hashOfConfig":"19"},{"size":81,"mtime":1611269196682,"results":"34","hashOfConfig":"19"},{"size":65,"mtime":1611257965324,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"6h5os",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\index.js",[],["76","77"],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\reportWebVitals.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\app\\App.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\services\\api.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\header\\header.js",["78"],"import React from 'react';\r\nimport './header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"bs-component header\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <a className=\"navbar-brand\" href=\"#\">Rick'N'Mortypedia</a>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarColor03\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"Characters\">Characters</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"Loctions\">Loctions</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"Episodes\">Episodes</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\random-character\\random-character.js",["79"],"import React, {Component} from 'react';\r\nimport './random-character.css';\r\nimport Api from \"../../services/api\";\r\nimport Preloader from \"../preloader\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport close from './../../images/close.svg'\r\nimport show from './../../images/show.svg'\r\n\r\nexport default class RandomCharacter extends Component {\r\n\r\n    ramApi = new Api();\r\n\r\n    state = {\r\n        character: {},\r\n        loading: true,\r\n        prevBtnDisabled: false,\r\n        nextBtnDisabled: false,\r\n        hideContent: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updateCharacter(this.randomId());\r\n        this.interval = setInterval(() => {\r\n            this.updateCharacter(this.randomId());\r\n        }, 6000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    randomId = () => {\r\n        return Math.floor(Math.random() * (671 - 1) + 1);\r\n    };\r\n\r\n    onCharacterLoaded = (character) => {\r\n        this.setState({\r\n            character,\r\n            loading: false,\r\n            error: false\r\n        })\r\n    };\r\n\r\n    onError = (err) => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false\r\n        })\r\n    };\r\n\r\n    updateCharacter = (id) => {\r\n        this.ramApi\r\n            .getCharacter(id)\r\n            .then(this.onCharacterLoaded)\r\n            .catch(this.onError);\r\n    };\r\n\r\n    prevCharacter = () => {\r\n        if(this.state.character.id === 1){\r\n            this.setState({prevBtnDisabled: true})\r\n        } else {\r\n            this.setState({prevBtnDisabled: false,nextBtnDisabled: false});\r\n            this.updateCharacter(this.state.character.id - 1);\r\n            clearInterval(this.interval);\r\n        }\r\n    };\r\n\r\n    nextCharacter = () => {\r\n        if(this.state.character.id === 671){\r\n            this.setState({nextBtnDisabled: true})\r\n        } else {\r\n            this.setState({prevBtnDisabled: false,nextBtnDisabled: false});\r\n            this.updateCharacter(this.state.character.id + 1);\r\n            clearInterval(this.interval);\r\n        }\r\n    };\r\n\r\n    toggleButton = () => {\r\n        this.setState({\r\n            hideContent: !this.state.hideContent\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const {character, loading, error, prevBtnDisabled, nextBtnDisabled, hideContent} = this.state;\r\n\r\n        const hasData = !(loading || error);\r\n\r\n        const errorMessage = error ? <ErrorIndicator/> : null;\r\n        const preloader = loading ? <Preloader/> : null;\r\n        const toggleButton = hasData ? <ToggleButton hideContent={hideContent}\r\n                                                     toggleButton={this.toggleButton}/> : null;\r\n        const content = hasData && !hideContent ? <CharacterContent character={character}\r\n                                                                    prevBtnDisabled={prevBtnDisabled}\r\n                                                                    nextBtnDisabled={nextBtnDisabled}\r\n                                                                    prevCharacter={this.prevCharacter}\r\n                                                                    nextCharacter={this.nextCharacter}/> : null;\r\n\r\n        return (\r\n            <div className=\"col-lg-12\">\r\n                {errorMessage}\r\n                {preloader}\r\n                {content}\r\n                {toggleButton}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst CharacterContent = ({prevCharacter, nextCharacter, prevBtnDisabled, nextBtnDisabled, character: {imgURL, name, status, species, gender}}) => {\r\n    const prevBtnClass = prevBtnDisabled ? 'disabled' : '';\r\n    const nextBtnClass = nextBtnDisabled ? 'disabled' : '';\r\n\r\n    return (\r\n        <div className=\"random-character col-lg-12 jumbotron\">\r\n            <div className=\"random-character-buttons\">\r\n                <button className={'btn btn-outline-primary ' + prevBtnClass}\r\n                        onClick={prevCharacter}>PREV</button>\r\n                <button className={'btn btn-outline-primary ' + nextBtnClass}\r\n                        onClick={nextCharacter}>NEXT</button>\r\n            </div>\r\n            <div className=\"random-character-photo jumbotron\">\r\n                <img src={imgURL} alt={name} className=\"random-character-avatar\"/>\r\n            </div>\r\n            <div className=\"random-character-info\">\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item name\"><span>Name: </span><span>{name}</span></li>\r\n                    <li className=\"list-group-item status\"><span>Status: </span><span>{status}</span></li>\r\n                    <li className=\"list-group-item species\"><span>Species: </span><span>{species}</span></li>\r\n                    <li className=\"list-group-item gender\"><span>Gender: </span><span>{gender}</span></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ToggleButton = ({toggleButton, hideContent}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"toggle-button\"\r\n                    onClick={toggleButton}><img src={hideContent ? show : close}/></div>\r\n        </React.Fragment>\r\n    )\r\n};","D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\item-list\\item-list.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\character-info\\character-info.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\item-list\\index.js",[],["80","81"],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\character-info\\index.js",[],["82","83"],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\random-character\\index.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\preloader\\preloader.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\app\\index.js",[],["84","85"],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\error-indicator\\error-indicator.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\header\\index.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\error-indicator\\index.js",[],"D:\\Project_Mayhem\\WEB_DEV\\REACT\\rick-and-morty-pedia\\src\\components\\preloader\\index.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":8,"column":21,"nodeType":"92","endLine":8,"endColumn":58},{"ruleId":"93","severity":1,"message":"94","line":141,"column":44,"nodeType":"92","endLine":141,"endColumn":83},{"ruleId":"86","replacedBy":"95"},{"ruleId":"88","replacedBy":"96"},{"ruleId":"86","replacedBy":"97"},{"ruleId":"88","replacedBy":"98"},{"ruleId":"86","replacedBy":"99"},{"ruleId":"88","replacedBy":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["101"],["102"],["101"],["102"],["101"],["102"],"no-global-assign","no-unsafe-negation"]